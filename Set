Set Interface  -> child interface of collection
               -> duplicates are not allowed .
               -> insertion order is not preserved.
               -> doesnt contain any new method , only collection method is present.


-> Implementation class -> HashSet -> Linked HashSet 
                                      -> SortedSet -> NavigableSet -> TreeSet 


1)HashSet - underlying Data Structure -> Hashtable 
          - what if we try to insert duplicate =>we wont get any runtime or complile time error ,simply add method returns false.
          - insertion order is not preserved. All objects are inserted based on HashCode.
          - Heterogeneous objects allowed.
          - null insertion present 
          - implements Serializable and Cloneable.
          - frequent Search Operation - best Choice is HashSet

Contructors for HashSet -> 

1) HashSet h = new HashSet();  default intial capacity = 16 and Default fill Ratio/Load Factor = 0.75
2) HashSet h = new HashSet(int initialCapacity);
3) HashSet h = new HashSet(int initialCapacity,float loadFactor);
4) HashSet h = new HashSet(Collection c); for interconversion between Collection object.

Load Factor -> After loading the how much factor , a new HashSet object will be created, that factor is called as load factor or fill ratio.



example code -
package collect;

import java.util.HashSet;

public class HashSetDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		HashSet h  = new HashSet();
		h.add("B");
		h.add("C");
		h.add("D");
		h.add("Z");
		h.add(null);
		h.add(10);
		System.out.println(h.add("Z"));	 //false 
		System.out.println(h);	
	}
}

