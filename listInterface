List Interface -> child interface of collection 

when go for list - need duplicates and insertion order preserved 

index is used to differentiate between two duplicate objects
insertion order preserved by placing 1st element at index 0 , 2nd at index 1 similarly insertion order can  be  preserved.

methods available in List->  all collection methods 
                         -> add(int index, Oject O )
                         -> addAll(int index, Collection c)
                         -> remove(int index)
                         -> indexOf( "A")
                         -> lastIndexOf("A") 
                         -> get(int Index)
                         -> set(int index,Object new )
                         -> ListIterator listIterator()

Implementation classes - ArrayList , Linked List , Vector 

ArrayList -> Resizable array or growable array
          -> Duplicates are allowed 
          -> Insertion order is preserved 
          -> Hetrogeneous objects are allowed (Except TreeSet and TreeMap )
          -> "null" insertion is possible 

constructors =>

1. ArrayList l = new ArrayList();
   new array of default size - 10 will be created and if  we try to insert the 11th element than its 
   new capacity = (current capacity * 3/2) + 1 ;
   and the pointer will start pointing to the new array making the previous arrray eligible for garbage collection.

2. ArrayList l = new ArrayList(int initialCapacity);
   contructor with predefined capacity to increase the performance 

3. ArrayList l = new ArrayList(Collection c)
   constructor with any collection object it may be linkedList , Stack  . If you want to create a equivalent object . 
   It is meant for interconversion of objects.

in any collection the output will be like [A,10,A, null] i.e.. in square brackets because whenever we try to print any object 
refrence internally toString() method will be called and in every collection the toString method is implemented like [...] .



----------------------java code for the arrayList --------------------------------
package collect;

import java.util.ArrayList;
import java.util.List;

public class ListOperationsExample {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		List<Object> num = new ArrayList<>();  //generics of object type used 
		num.add(12);
		num.add(57);
		num.add(21);
		num.add("A"); 
		num.add(null);

		System.out.println("List after adding elements " + num);		
		num.add(2, 65);		
		System.out.println("List after adding elements " + num);		
		
		ArrayList l = new ArrayList();   //generics came lator will go on that 
		l.add(1);
		l.add("P");
		l.add(null);
		
		System.out.println("the arraylist with heterogeneos object is" + l);
		
	}
}

---------------------------------------------------------------------------------------------------------------------------

goal of collection - to hold and transfer objects from one place to another place 
->To hold the data and transfer compulsaraly it should be serializable
=> To support this type of requirement every collection class implements serializable interface.


sender ->arrayList (serializable) ----------- --------- --------- ----> arraylist (cloned to use)<-reciever

->every collection class already implements clonnable interface

------------------------------------------------------------------------------------------------------------------------------
ArrayList and Vector implements Random Access Interface-> any random element we can acess with the same speed.
-> If our frequent operation is retrieval operation then arrayList is the best choice.
RandomAccess Interface -> present in java.util
                        -> Marker (Interface)


    ArrayList l1 = new ArrayList();
		LinkedList l2 = new LinkedList();
		System.out.println(l1 instanceof Serializable); //true
		System.out.println(l2 instanceof Serializable); //true
		System.out.println(l1 instanceof Cloneable);    //true
		System.out.println(l2 instanceof Cloneable);    //true
		System.out.println(l1 instanceof RandomAccess); //true
		System.out.println(l2 instanceof RandomAccess); //false
		
->If our frequent operation is insertion/removal in the middle than Arraylist is the worst choice(because several shift operation are required).


What  is the difference between the arrayList and the vector.
                    ArrayList                                   |                Vector 
  ðŸ‘‰   non synchronized methods                                 |         synchornized methods
  ðŸ‘‰   not thread Safe                                          |        thread Safe
  ðŸ‘‰   performance is relatively high                           |        relatively performance is low 
  ðŸ‘‰   1.2 v non legacy class                                   |        1.0 v legacy class


I want to use ArrayList Only and also want thread safety . How to achieve synchronized version of ArrayList Object ?
by using Collection class synchronizedList() method.

        public static List synchronizedList(List l)

        ArrayList l = new ArrayList();               //non- synchronized
        List sl = Collections.synchronizedList(l);  //synchronized

-------------------------------------------------------------x----------------------------------------------------------x----------------------------------------------------

LinkedList class -> If we want to insert/delete in the middle of the list 
                 -> In linked List the elements is not stored at consecutive location of the memory 
                 -> underlying data structure is Doubly LinkedList
                 -> Insertion order is preserved.
                 -> Duplicates are allowed.
                 -> Heterogeneous Elements are allowed
                 -> null insertion is possible.
                 -> Linked List implements Serializable and Clonable interfaces but not RandomAccess Interface.

disadvantage ->  retrival operation takes time as it have to go to each node for next node address.

methods in Linked list -> addFirst()
                       -> addLast()
                       -> getFirst()
                       -> getLast()
                       -> removeFirst()
                       -> removeLast()

Constructors ->
1. LinkedList l = new LinkedList();   //creates an empty LinkedList Object
2. LinkedList l = new LinkedList(Collection c);  //creates an equivalent LinkedList Object for the  given Collection


package collect;
import java.util.LinkedList;
public class linkedListDemo {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LinkedList l = new LinkedList();
		l.add("nitish");
		l.add(30);
		l.add(null);
		l.set(0,"Software");
		l.add(0,"venky");
		l.removeLast();
		l.addFirst("CCC");
		System.out.println(l);		
	}

}


diffeerence between ArrayList and LinkedList 

                    ArrayList               |          LinkedList
Best choice for Retrieval                   |        Best Choice for insertion or deletion in the middle 
Worst choice for insertion and deletion     |        Worst choice for retrieval 
Resizable or growable array                 |        Double LinkedList 
Implement RandomAccess                      |        doesnt implement RandomAccess Interface 


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. Vector class -> UNderlying data structure is Resizable Array /Growable array 
                -> Duplicates are allowed 
                -> Insertion order is preserved 
                -> 'null' insertion is possible 
                -> Heterogeneous objects are allowed 
                -> implements Serializable and clonable and RandomAccess Interface.
                -> Most of the methods present in vector are synchronized . Hence vector object is thread Safe.
                -> Best Choice is the frequent operation is retrieval.

Vector Specific Methods -> as its older version its method name are lengthy 
                        -> Remove(Object O)
                        -> removeElement(Object o)
                        -> remove(int index)
                        -> RemoveElementAt(int index)
                        -> clear()
                        -> removeAllElements()
To retireive elements -> Object get(int index)
                      -> Object elementAt(int index)
                      -> Object firstElement ()
                      -> Object lastElement()
other methods  ->
               int size();  <- current how many object are there
               int capacity();   <- Total how many object we can accomodate 
               Enumeration elements ();   <-get objects one by one 


Vector class constructors ->
1. Vector v = new Vector();   default intial capacity - 10
   new capacity = 2* current capacity 

2. Vector v = new Vector(int initial Capacity);   <-performance will be improved 
3. Vector v = new Vector (int initial Capacity,int incremental capacity)
4. Vector v = new Vector ( Collection C);  <- create an equivalent Vector Object for the given Collection


example code ----
package collect;

import java.util.Vector;

public class VectorDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Vector v = new Vector();
	    System.out.println(v.capacity());   //10
	    for(int i= 1;i<=10;i++) {
	    	v.addElement(i);
	    }
	    System.out.println(v.capacity());    //10
	    v.addElement("A");
	    System.out.println(v.capacity());     //20
	    System.out.println(v);

	}

}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Stack -> Child class of Vector 
      -> Speacially designed class for Last In First Out (LIFO)

contructor -> Stack s = new Stack();

various methods for Stack -> push ()= to add an object to the queue 
                          -> pop()  => to remove and return last element of the stack 
                          -> peek()  => to return the top of the stack without removal 
                          -> empty() => to check whether stack is empty or not 
                          -> search("A") => whether a particular element is present or not , return offset 


<------ example program ---->
package collect;

import java.util.Stack;

public class stackDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Stack s = new Stack();
		s.push("A");
		s.push("B");
		s.push("C");
		System.out.println(s);  //A,B,C
		System.out.println(s.search("A"));  //3
		System.out.println(s.search("Z"));  //-1 if it is not available 
	}
}


                       
